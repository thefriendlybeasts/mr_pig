# Global
# -------------------------------------------------------------------------------------------------
local:
  # What folder is your site in (relative to Gruntfile.js)? If it's the same folder, use `./`.
  root: html

dist:
  # What would you like to name the folder that holds the built version of your site? I like "Gus."
  root: dist

# Your Statamic theme folder.
theme: redwood




# Tasks config
# -------------------------------------------------------------------------------------------------
# The array keys one-level under `tasks` are task names. That means you can append any of them to
# `grunt` to tell Mr. Pig to do something swizzeet.
# Ex. `grunt serve`
tasks:
  serve:
    browserSync:
      # Which files do you want Mr. Pig to watch for changes in?
      # CSS changes will be injected, others will cause a refresh.
      files:
        - '<%= m.local.themePath %>/**/*.{js,html,php,css}'
        - '<%= m.local.root %>/site/content/**/*.md'

    watch:
      # Q: Watch and BrowserSync!?
      # A: Yes. They work together. See https://www.browsersync.io/docs/grunt/#grunt-watch if you
      #    don't believe Señor 돼지.
      sass:
        files:
          - '<%= m.local.themePath %>/sass/**/*.scss'


  build:
    copy:
      # Which files do you need copied over to the built version of your site
      # (relative to `local:root`)?
      # Files that make Statamic work, content (including assets), and your theme should be taken
      # care of already.
      # NOTE **if you don't use Usemin's build blocks,** you need to add any styles and JavaScript.
      files:
        - '{apple-touch-icon,favicon,mstile}*'
        - browserconfig.xml
        - humans.txt
        - robots.txt
      env: live.env

    # Uglify minifies JavaScript.
    uglify:
      # Discard console.* functions.
      drop_console: true
      # Vue doesn't support IE8; no point in not screwing it if you're Vueing it up like a boss.
      screwIE8: true

    # Usemin looks through your HTML for blocks of script tags to concatenate and minify.
    #
    # Blocks should look something like this
    #   1. LANG = `css` or `js`.
    #   2. ROOT = the root path for files in the block.
    #      (could be `html`, if blank, leave out the `()`)
    #   3. PATH  = the path to the built file, relative to `dist:root` (defined above).
    #   4. THEME = your theme folder.
    #   5. FILES = `script`/`link` tags.
    #
    # ```lang-html
    # <!-- build:LANG(ROOT) PATH -->
    # FILES
    # <!-- endbuild -->
    # ```
    #
    # # CSS example
    # ```lang-html
    # <!-- build:css(html) /site/themes/redwood/css/redwood.css -->
    # <link rel="stylesheet" href="/site/themes/redwood/css/hex.prefixed.css">
    # <link rel="stylesheet" href="/site/themes/redwood/css/redwood.prefixed.css">
    # <!-- endbuild -->
    # ```
    #
    # # JavaScript example
    # ```lang-html
    # <!-- build:js(html) /site/themes/redwood/js/redwood.js -->
    # <script src="/site/themes/redwood/js/redwood.js"></script>
    # <script src="/site/themes/redwood/js/some-other.js"></script>
    # <!-- endbuild -->
    # ```
    usemin:
      # Where are your blocks (relative to your theme folder)?
      files:
        - layouts/default.html


  # Non-multi-task-specific
  postcss:
    autoprefixer:
      # Which browsers do you want to support (see https://github.com/ai/browserslist)?
      browsers:
        - last 2 versions
        - ie > 9
      # What extension do you want to use for autoprefixed CSS files?
      # This prevents Mr. Pig from overwriting the source `.css` files when not using Sass, i.e., the
      # flow will look like this:
      # ```
      # Sassy:    *.scss -> *.css -> *.prefixed.css
      # Sassless:           *.css -> *.prefixed.css
      # ```
      #
      # NOTE Use this extension in your markup, and ignore all files with it in `.gitignore`.
      # Ex. `<link rel="stylesheet" href="/site/themes/redwood/css/redwood.prefixed.css">`
      ext: .prefixed.css
